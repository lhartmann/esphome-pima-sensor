# /usr/bin/env python3

CONF_VOLTAGE = "voltage"
CONF_CURRENT = "current"
CONF_ENERGY = "energy"
CONF_REACTIVE_ENERGY = "reactive_energy"

def phase_measurement(prefix, sensor_schema=None):
    return {
        prefix+"_1": sensor_schema,
        prefix+"_2": sensor_schema,
        prefix+"_3": sensor_schema,
    }

def rated_measurement(prefix, sensor_schema=None):
    return {
        prefix+"_consumed_total": sensor_schema,
        prefix+"_consumed_peak_rate": sensor_schema,
        prefix+"_consumed_intermediate_rate": sensor_schema,
        prefix+"_consumed_off_peak_rate": sensor_schema,
        prefix+"_consumed_d_rate": sensor_schema,
        prefix+"_generated_total": sensor_schema,
        prefix+"_generated_peak_rate": sensor_schema,
        prefix+"_generated_intermediate_rate": sensor_schema,
        prefix+"_generated_off_peak_rate": sensor_schema,
        prefix+"_generated_d_rate": sensor_schema,
    }

procedural_schema_fragment = {
    **phase_measurement(CONF_VOLTAGE),
    **phase_measurement(CONF_CURRENT),
    **rated_measurement(CONF_ENERGY),
    **rated_measurement(CONF_REACTIVE_ENERGY+"_capacitive"),
    **rated_measurement(CONF_REACTIVE_ENERGY+"_inductive"),
}

print("// Generated by helper.py:")
print("protected:")
for key in list(procedural_schema_fragment.keys()):
    print("  sensor::Sensor *" + key + "_{nullptr};")

print("")
print("public:")
for key in list(procedural_schema_fragment.keys()):
    print("  void set_"+ key + "_sensor(sensor::Sensor *s) " + "{ " + key + "_ = s; }")

print("")
print("// Generated by helper.py, for dumpconfig")
print("void PIMA::dump_config() {  // NOLINT(readability-function-cognitive-complexity)")
print('  ESP_LOGCONFIG(TAG, "PIMA:");')
for key in list(procedural_schema_fragment.keys()):
    print(f'  LOG_SENSOR("", "{key}", this->{key}_);')
print('}')

print("")
print("// Generated by helper.py, for config.yml")
for key in list(procedural_schema_fragment.keys()):
    print(f'  {key}:')
    print(f'    name: $device_name {key}')
